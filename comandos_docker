Imagens docker -> https://hub.docker.com

Linha de Comando do Docker -> https://docs.docker.com/engine/reference/commandline/docker/

Mostrar a versão do docker instalado -> docker version

Mostrar os containers que estão sendo executados no momento -> docker ps ou docker container ls

Rodando um container -> docker run imagem_docker

Rodando um container em modo iterativo (esse modo libera um terminal para o usuário
navegar dentro dos diretórios do container como num sistema operacional linux normal e mantem o container em execução) -> docker run -it imagem_docker (-i = iteration / t = gerar um novo tty (terminal))

Mostrando os containers que estão e já foram executatos -> docker ps -a (-a = all)

Quando rodamos um container, ele ocupa o terminal, então para executar um container e
deixar o terminal livre, ou seja, rodando em background -> docker run -d imagem_docker
(-d = detached)

Containers docker não tem conexão externa, logo temos que expor as portas do container
para nossa máquina -> docker run -d -p 3000:80 imagem_docker (-p = port / porta_externa:porta_docker)

Parando containers -> docker stop nome_ou_id_do_container

Para voltar a utilizar um container que já usou o stop, que pode ser visto no comando
docker ps -a, podemos utilizar o comando -> docker start nome_ou_id_do_container

Criando um container nomeado. Para nomear o container, já que ele gera uns nomes estranhos para o container, aí fica difícil de decorar os nomes, vc nomeia o container para ficar mais fácil de utilizar com os comandos stop, start ou qualquer que seja -> docker run -d -p 80:80 --name nome_que_vc_quer_dar_ao_container nome_da_imagem

Ver os logs no docker -> docker logs nome_ou_id_do_container

Remover um container parado -> docker rm nome_ou_id_do_container

Forçar a parada de um container em execução e removê-lo -> docker rm -f nome_ou_id_do_container (-f = force)

Nome de criação do arquivo docker para configurações da imagem, é convencionado o nome "Dockerfile"

Comandos básicos na criação do arquivo Dockerfile (https://docs.docker.com/engine/reference/builder/): FROM -> utilização de uma imagem base / WORKDIR -> onde ficará o diretório de trabalho com os arquivos da aplicação / EXPOSE -> expor qual porta será utilizada pelo docker para utilizar a aplicação / COPY -> copiar arquivos entre os diretórios da aplicação para o WORKDIR / RUN -> executa um comando no terminal / CMD -> inicia a aplicação (o comando CMD funciona em formato de vetor, em que cada elemento desse vetor separado por "," executa um comando).

Comando de ajuda do docker para saber quais flags e comandos podemos utilizar -> docker comando --help (exemlplo: docker run --help)

Listar as imagens disponíveis -> docker images. Tem uma variação importante que é o comando docker images nome_da_imagem, nele vc vai poder fazer um filtro e buscar apenas as imagens com este nome.

Nomear uma imagem -> docker tag id_da_imagem nome_que _quer_dar_a_imagem

Nomear uma imagem com uma determinada versão -> docker tag id_da_imagem nome_que _quer_dar_a_imagem:versão_da_imagem(tag)

Para baixar uma imagem -> docker pull nome_da_imagem_que_quer_baixar

Para baixar uma imagem com uma determinada versão -> docker pull nome_da_imagem_que_quer_baixar:versão_da_imagem(tag)

Compilar uma imagem para gerar um container já colocar o nome -> docker build -t nome_da_imagem

Compilar uma imagem para gerar um container já colocar o nome e com versão -> docker build -t nome_da_imagem:versão_da_imagem(tag)

Remover imagens paradas -> docker rmi id_ou_nome_da_imagem:pode_colocar_ou_não_a_tag

Remover imagens rodando em container (tem como, mas dá problema nos containers que usam a imagem) -> docker rmi -f id_ou_nome_da_imagem:pode_colocar_ou_não_a_tag

Remover imagens, containers e networks que não estão sendo mais utilizados ou muito pouco utilizados -> docker system prune

Quando nós vamos utilizar o container apenas uma vez para um teste ou algo do tipo, existe um comando que deleta automaticamente o container assim que der o stop nele. Você roda o container
com essa flag específica e quando de um docker stop vc deleta ele automaticamente -> docker run --rm id_ou_nome_do_container

Copiar arquivo entre containers ou entre container e diretório de máquina do usuário -> docker cp container:caminho_com_arquivo .\caminho_para_onde_vai_o_arquivo

Verificar dados de execução do container -> docker top id_ou_nome_do_container

Verificar informação de configurações do container -> docker inspect id_ou_nome_do_container

Verificar todos os containers rodando e os recursos que estão sendo alocados, como processamento e memória gasto pelo container - > docker stats

Autenticação no docker hub. É necessário que se faça uma conta no site (https://hub.docker.com). Depois usa-se o comando -> docker login e então inserir usuário e senha para enviar ou 
atualizar as imagens no repositório oficial.

Para sair do terminal do docker hub -> docker logout

Para enviar uma (de graça) ou mais (pago) imagens imagem para o docker hub é necessário já estar logado e criar um repositório na conta -> docker push nome_do_usuário_dockerhub/nome_da_imagem

Para atualizar imagens do docker hub é necessário já estar logado e acessar o repositório da conta que ela está -> docker push nome_do_usuário_dockerhub/nome_da_imagem:tag(versão)

Baixar uma imagem e depois criar um container com essa image -> docker pull nome_da_imagem:tag_ou_não -> docker run nome_da_imagem:tag_ou_não

Tipos de volume -> Anonymous: volumes com nomes aleatórios, (não é interessante um nome aleatório num volume), fica no ambiente do coker. Named: volumes que podemos descrever nomes para eles (melhor para trabalhar), fica no ambiente docker. Bind Mounts: é uma forma de salvar os volumes na máquina do usuário, sem gerencia do docker, fica fora do ambiente do docker.

Para criar um volume anônimo -> docker run -v /diretório_para_salvar_os_arquivos (tem que ser o diretório que esteja no diretório WORKDIR escrito no arquivo Dockerfile, ou seja, dentro do docker).

Listar todos volumes -> docker volume ls

Para criar um volume nomeado -> docker run -v nome_do_volume:/diretório_para_salvar_os_arquivos (tem que ser o diretório que esteja no diretório WORKDIR escrito no arquivo Dockerfile, ou seja, dentro do docker).

Para criar um bind mount (salvar arquivos no pc ao invés do WORKDIR do docker) -> docker run -v /diretório_que_quer_salvar_no_pc:/diretório_que_esteja_no_diretório_WORKDIR_escrito_no_arquivo_Dockerfile.

O bind mount tabém serve para fazer a atualização em tempo real da aplicação, de forma que não é mais necessário ficar dando o comando docker build todas as vezes que houver uma alteração no projeto. Essa forma de usar o bind mount, não muda o conceito de volumes dele, é só que quando for utilizar o bind mount para salvar os arquivos do volume no pc, você coloca o diretório de destino do volume no pc no diretório pai da aplicação, o mesmo onde está o arquivo Dockerfile, e o outro diretório você coloca no mesmo que está escrito no WORKDIR, dessa forma, toda a atualização será em tempo real.

Não só tem como criar volumes utilizando a flag -v, tmbém temos a opção de criar um volume manualmente -> docker volume create nome_do_volume.

Verificar detalhes de um volume -> docker volume inspect nome_do_volume.

Remover volumes -> docker volume rm nome_do_volume. Se o container estiver em execução, o volume só poderá ser removido se remover antes o container atrelado ao volume.

Removendo volumes não utilizados -> docker volume prune.

Há uma possibilidade mas muito pouco usada que chama, volumes com permissão apenas de leitura, mais usados para consultas. É bom se atentar, pois o docker aprensentará erro de somente leitura se tentar adicionar informações -> docker run -v volume:/data:ro (ro = ready only).


Existem três tipos de conexão/comunicação no docker - > Externa: conexão com API de servidor remoto / Como o host: comunicação com a máquina que está executando o docker / Entre containers: comunicação entre dois ou mais conteiners na mesma instalação do docker.

